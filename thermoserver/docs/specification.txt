# copyright 2013 Steve Midgley 
# http://www.gnu.org/licenses/gpl-3.0.txt

#     This file is part of the Open Thermostat project.

#     The Open Thermostat project is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.

#     The Open Thermostat project is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.

#     You should have received a copy of the GNU General Public License
#     along with The Open Thermostat project.  
#     If not, see <http://www.gnu.org/licenses/>.

USAGE PATTERN

ThermoClient uploads status file to server
ThermoClient downloads config file from server
  ThermoClient loops on download config file using 'if-file/newer-date'
    ThermoClient operates on config file, adjusting heater run-state accordingly
ThermoApp displays list of available heaters to control
ThermoApp displays current config and status for a selected heater
ThermoApp accepts user input to change current config
ThermoApp activates WebApp api to register that input with server
Server adjusts appropriate config file to current settings

THERMOCLIENT API

POST: /api/:api_key/file/:thermoname
  POST payload under key "file" - upload is written directly to file :thermoname
GET: /api/:api_key/file/:thermoname
  GETs :thermoname file
GET: /api/:api_key/if-file/newer-date/:date-string/:thermoname
  Only returns content if file is newer than date specified
  :date-string in URI::escaped, Chronic-parsable format *without* slashes such as: 
   "10-18-22%2010%3A05am" (represents: 10-18-22 10:05am)
GET: /api/:api_key/list/:pattern
  Returns JSON payload with array of filenames corresponding to files matching pattern
  :pattern can only be ascii chars 0-9 period and hyphen - wild cards are automatically applied to front/back of pattern
    Primary use-case is to obtain all "config" or "status" files on the server

WEB APP API
PUT: /app-api/:app_api_key/:thermoname/operation_mode/:mode
  Sets the named heater to mode specified
  Mode options are: off or daily_schedule
  To set "immediate" or "temp_override" modes, use "override_mode" API
  Actions: operation_mode is set to :mode
PUT: /app-api/:app_api_key/:thermoname/override_mode/:mode/:temp_f
  Sets the named heater to override :mode specified at :temp_f
  :mode values can be: temp_override, hold, immediate (hold and immediate are synonyms)
  Actions: operation_mode is set to temp_override or immediate, as appropriate
PUT: /app-api/:app_api_key/:thermoname/resume_default
  Returns the named heater to normal scheduled operation (or off status)
  Actions: temp_override key is deleted and operation mode value is set to value of key "default_mode" (or "off" if default_mode key is not found)
PUT: /app-api/:app_api_key/:thermoname/default_mode/:mode
  Sets the value of default_mode. Possible values are "off" and "daily_schedule"
POST: /app-api/:app_api_key/:thermoname/initialize
  Creates a new heater configuration file with default configuration for thermoname. If thermoname exists, returns error.
POST: /public-api/validate/config
  Validates a configuration file to confirm it will work with Thermoclient
  Recieves payload under key "file" in POST upload
  Returns 200 payload {"json": "valid", "fields": []} if OK
    or 200 {"json"=>"invalid", "fields" => ["invalid_field_name_1", "invalid_field_name_2"]}
    Values in fields may be descriptive and not precisely a field name

Planned
GET: /api/:api_key/if-file/not-match-hash/:hash-string/thermoname]
  Only returns content if hash specified does not match hash of current file on disk
HEAD: /api/:api_key/file/:thermoname
  Lets client check head to see if file has changed
GET: /api/:api_key/if-file/changes/:thermoname
  GETs :thermoname file but return content only after the file changes (changes during wait period)
  timeout is a string passed as Chronic compatible future time so that this will parse
    Chronic.parse("#{params::timeout after now}")


