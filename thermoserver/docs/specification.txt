# copyright 2013 Steve Midgley 
# http://www.gnu.org/licenses/gpl-3.0.txt

#     This file is part of the Open Thermostat project.

#     The Open Thermostat project is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.

#     The Open Thermostat project is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.

#     You should have received a copy of the GNU General Public License
#     along with The Open Thermostat project.  
#     If not, see <http://www.gnu.org/licenses/>.

Thermo uploads status file to server
Thermo downloads config file from server
  Thermo downloads config file in wait-for-change mode
Client uploads config file to server
Client downloads status file from server

API

POST: /api/[key]/file/[thermo-name]
  JSON payload under key "file" - upload is written directly to file [thermo-name]
GET: /api/[key]/file/[thermo-name]
  GETs [thermo-name file]
GET: /api/[key]/if-file/newer-date/[date-string]/[thermo-name]
  Only returns content if file is newer than date specified
  [date-string] in URI::escaped, Chronic-parsable format *without* slashes such as: 
   "10-18-22%2010%3A05am" (represents: 10-18-22 10:05am)

In progress
GET: /api/[key]/list/[pattern]
  Returns JSON payload with array of filenames corresponding to files matching pattern
  [pattern] can only be ascii chars 0-9 and hyphen - no wild card matches
    Primary use-case is to obtain all "config" or "status" files on the server


Planned
GET: /api/[key]/if-file/not-match-hash/[hash-string]/thermo-name]
  Only returns content if hash specified does not match hash of current file on disk
HEAD: /api/[key]/file/[thermo-name]
  Lets client check head to see if file has changed
GET: /api/[key]/if-file/changes/[thermo-name]
  GETs [thermo-name] file but return content only after the file changes (changes during wait period)
  timeout is a string passed as Chronic compatible future time so that this will parse
    Chronic.parse("#{params[:timeout] after now}")


